import { VideoMetadata } from '@/types/video';

interface UploadProgressCallback {
  onProgress?: (progress: number) => void;
  onSuccess?: (data: VideoMetadata) => void;
  onError?: (error: Error) => void;
}

export const uploadMedia = async (
  file: File,
  title?: string,
  callbacks?: UploadProgressCallback
): Promise<VideoMetadata> => {
  const finalTitle = title || file.name.replace(/\.[^/.]+$/, '');
  const token = typeof window !== 'undefined' ? localStorage.getItem('token') || '' : '';
  
  if (!token) {
    const error = new Error('Token d\'authentification manquant');
    callbacks?.onError?.(error);
    throw error;
  }

  try {
    // Utilisation de l'endpoint REST simplifié pour éviter les problèmes CORS
    const formData = new FormData();
    formData.append('file', file);
    formData.append('title', finalTitle);
    formData.append('description', `Vidéo téléversée: ${finalTitle}`);

    const xhr = new XMLHttpRequest();
    xhr.timeout = 30 * 60 * 1000; // 30 minutes
    
    // Configuration du suivi de progression
    xhr.upload.onprogress = (event) => {
      if (event.lengthComputable) {
        const percentComplete = (event.loaded / event.total) * 100;
        callbacks?.onProgress?.(percentComplete);
      }
    };
    
    return new Promise<VideoMetadata>((resolve, reject) => {
      xhr.onload = async function() {
        if (xhr.status >= 200 && xhr.status < 300) {
          try {
            const response = JSON.parse(xhr.responseText);
            
            if (response.success && response.video) {
              const videoMetadata: VideoMetadata = {
                id: response.video.id,
                title: response.video.title,
                url: response.video.url,
                thumbnailUrl: response.video.thumbnail_url || '',
                duration: response.video.duration || 0,
                createdAt: response.video.createdAt || new Date().toISOString(),
                updatedAt: response.video.updatedAt || new Date().toISOString()
              };
              
              callbacks?.onSuccess?.(videoMetadata);
              resolve(videoMetadata);
            } else {
              const error = new Error(response.error || 'Erreur inconnue lors de l\'upload');
              callbacks?.onError?.(error);
              reject(error);
            }
          } catch (error) {
            const parsedError = new Error(`Erreur lors du traitement de la réponse: ${error instanceof Error ? error.message : String(error)}`);
            callbacks?.onError?.(parsedError);
            reject(parsedError);
          }
        } else {
          try {
            const errorData = JSON.parse(xhr.responseText);
            const error = new Error(`Erreur HTTP ${xhr.status}: ${errorData.detail || errorData.error || xhr.statusText}`);
            callbacks?.onError?.(error);
            reject(error);
          } catch {
            const error = new Error(`Erreur HTTP ${xhr.status}: ${xhr.statusText}`);
            callbacks?.onError?.(error);
            reject(error);
          }
        }
      };
      
      xhr.onerror = () => {
        const error = new Error('Erreur réseau lors de l\'upload');
        callbacks?.onError?.(error);
        reject(error);
      };
      
      xhr.onabort = () => {
        const error = new Error('Upload annulé');
        callbacks?.onError?.(error);
        reject(error);
      };
      
      xhr.ontimeout = () => {
        const error = new Error('Timeout lors de l\'upload');
        callbacks?.onError?.(error);
        reject(error);
      };
      
      // Utiliser l'endpoint simplifié pour éviter les problèmes CORS
      xhr.open('POST', `${process.env.NEXT_PUBLIC_API_URL}/api/uploads/upload-video-simple`, true);
      xhr.setRequestHeader('Authorization', `Bearer ${token}`);
      xhr.send(formData);
    });
  } catch (error) {
    const parsedError = error instanceof Error ? error : new Error(String(error));
    callbacks?.onError?.(parsedError);
    throw parsedError;
  }
};
